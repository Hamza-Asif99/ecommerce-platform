// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Visitor {
  id  String    @id @default(uuid())
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
   email      String    @unique    
  username    String
  address     String
  password    String
  phone       String?
  orders      Order[]
  // cart        Cart?
}
model User {
  id          String    @id @default(uuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  email       String    @unique    
  username    String
  address     String?
  password    String
  isVerified  Boolean @default(false)
  phone       String?
  orders      Order[]
  cart        Cart?
}

model Product { 
  id            String   @id @default(uuid())
  name          String 
  description   String
  price         Int
  color         String
  image1        String
  image2        String 
  image3        String?
  category      Category  @relation(fields: [categoryId], references: [id])
  categoryId    String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  orders        OrdersOfProducts[]  
  carts         CartOfProducts[]
}

model Category {
  id            String    @id @default(uuid())
  name          String
  products      Product[]

}

model Order {
  id           String    @id @default(uuid())
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  customer     User      @relation(fields: [customerId], references: [id])
  customerId   String
  visitor     Visitor    @relation(fields: [visitorId], references: [id])
  visitorId    String
  products     OrdersOfProducts[]
  cart         Cart      @relation(fields: [cartId], references: [id]) 
  cartId       String    @unique
}

model OrdersOfProducts {
  order        Order     @relation(fields: [orderId], references: [id])
  orderId      String 
  product      Product   @relation(fields: [productId], references: [id])
  productId    String 
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@id([productId, orderId])
}

model Cart {
  id           String    @id @default(uuid())
  quantity     String 
  isCheckedOut Boolean
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  products     CartOfProducts[]
  order        Order?
  customer     User      @relation(fields: [customerId], references: [id])
  customerId   String    @unique
  // visitor      Visitor    @relation(fields: [visitorId], references: [id])
  // visitorId    String     @unique
}


model CartOfProducts {
  cart             Cart      @relation(fields: [cartId], references: [id])
  cartId           String 
  product          Product   @relation(fields: [productId], references: [id])
  productId        String 
  productQuantity  Int 

  @@id([productId, cartId])
}
